#ifndef Utility_Screen_h
#define Utility_Screen_h

#include "../../Controllers.h"
#include "Wire.h"

#define MEM_TYPE __attribute__((progmem))
#define SSD1306_SETLOWCOLUMN 0x00
#define SSD1306_SETHIGHCOLUMN 0x10
#define SSD1306_MEMORYMODE 0x20
#define SSD1306_SETSTARTLINE 0x40
#define SSD1306_SETCONTRAST 0x81
#define SSD1306_CHARGEPUMP 0x8D
#define SSD1306_SEGREMAP 0xA0
#define SSD1306_DISPLAYALLON_RESUME 0xA4
#define SSD1306_DISPLAYALLON 0xA5
#define SSD1306_NORMALDISPLAY 0xA6
#define SSD1306_INVERTDISPLAY 0xA7
#define SSD1306_SETMULTIPLEX 0xA8
#define SSD1306_DISPLAYOFF 0xAE
#define SSD1306_DISPLAYON 0xAF
#define SSD1306_SETSTARTPAGE 0XB0
#define SSD1306_COMSCANINC 0xC0
#define SSD1306_COMSCANDEC 0xC8
#define SSD1306_SETDISPLAYOFFSET 0xD3
#define SSD1306_SETCOMPINS 0xDA
#define SSD1306_SETVCOMDETECT 0xDB
#define SSD1306_SETDISPLAYCLOCKDIV 0xD5
#define SSD1306_SETPRECHARGE 0xD9
#define SSD1306_DEACTIVATE_SCROLL 0x2E
#define SSD1306_NOP 0XE3


#define PGMDATA(_n) static const uint8_t __attribute__((progmem)) _n[]
inline uint8_t readFontByte(uint8_t const *addr) { return pgm_read_byte(addr); }

#define FONT_LENGTH 0
#define FONT_WIDTH 2
#define FONT_HEIGHT 3
#define FONT_FIRST_CHAR 4
#define FONT_CHAR_COUNT 5
#define FONT_WIDTH_TABLE 6

const static uint8_t io3x5[3][4]={
  {0x1C,0x3E,0x3E,0x1C}, // 0x30 1
  {0x08,0x08,0x08,0x08},  // 0x31 0
  {0x1C,0x22,0x22,0x1C} // 0x32 /
};
/*
const static uint8_t number2x5[10][2]={
  {0x78,0x3C}, {0x00,0x7C}, {0x74,0x5C}, {0x54,0x7C}, {0x3C,0x7C},
  {0x5C,0x74}, {0x7C,0x74}, {0x64,0x1C}, {0x7C,0x7C}, {0x5C,0x7C}
};
*/
PGMDATA(bmpTitle) = { // 1P2P
  0b11111000,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b00011111,  0b11111100,0b11111111,0b11111111,0b11111111,0b11111110,0b11111111,0b11111111,0b00111111,
  0b11111110,0b11111111,0b11111111,0b11111111,0b11111110,0b11111111,0b11111111,0b01111111,  0b11111111,0b11111111,0b11111111,0b11111111,0b11111110,0b11111111,0b11111111,0b11111111,
  0b10111111,0b10001111,0b00000011,0b11100000,0b11111110,0b11111111,0b00000011,0b11100000,  0b10011111,0b10000111,0b00000011,0b11100000,0b01111110,0b11111111,0b00000011,0b11100000,
  0b10001111,0b10000011,0b00000011,0b11100000,0b00111110,0b11111111,0b00000011,0b11100000,  0b11001111,0b10010011,0b01110011,0b11111110,0b00011110,0b10000000,0b01110011,0b11111110,
  0b11001111,0b10011001,0b01110011,0b11111110,0b00001110,0b10000000,0b01110011,0b11111110,  0b11001111,0b10011000,0b01110011,0b11111110,0b00001110,0b10000000,0b01110011,0b11111110,
  0b00001111,0b10011100,0b00000011,0b11111110,0b11111110,0b11111111,0b00000011,0b11111110,  0b00011111,0b10011110,0b00000111,0b11111111,0b11111110,0b11111111,0b00000111,0b11111111,
  0b00111111,0b10001111,0b00000111,0b11111111,0b11111110,0b11111111,0b00000111,0b11111111,  0b11111111,0b11111111,0b11111111,0b11111111,0b11111110,0b11111111,0b11111111,0b11111111,
  0b11111111,0b11111111,0b11111111,0b11111111,0b11111110,0b11111111,0b11111111,0b11111111,  0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111
};

PGMDATA(bmpFC) = {
  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b01100111,0b11111110,  0b01100111,0b11111110,  0b01100111,0b11101110,  0b11100111,0b11100011,  0b11111111,0b11110000,
  0b00111111,0b11111000,  0b00001111,0b11111001,  0b11000111,0b11111001,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,
  0b00001111,0b11111111,  0b00111111,0b11111100,  0b11111111,0b11110000,  0b11111111,0b11100011,  0b11111111,0b11110000,  0b00111111,0b11111100,  0b00001111,0b11111111,  0b00000111,0b11100000,
  0b00000111,0b11100000,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11111111,0b11100111,
  0b11110111,0b11100111,  0b11000111,0b11100111,  0b00001111,0b11111111,  0b00111111,0b11100000,  0b00111111,0b11100000,  0b00001111,0b11111111,  0b11000111,0b11111111,  0b11110111,0b11111111,
  0b11111111,0b11111111,  0b00111111,0b11111100,  0b00001111,0b11110000,  0b11001111,0b11110011,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100111,
  0b11100111,0b11100111,  0b11111111,0b11111111,  0b00111111,0b11111100,  0b00001111,0b11110000,  0b11001111,0b11110011,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100111,
  0b11100111,0b11100111,  0b11001111,0b11110011,  0b00001111,0b11110000,  0b00111111,0b11111100,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11100111,0b11111111,
  0b11100111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11100111,0b11111111,  0b11001111,0b11111111,  0b00001111,0b11100000,  0b00111111,0b11100000,  0b11111111,0b11111111,
  0b00000111,0b11100000,  0b00000111,0b11100000,  0b01100111,0b11111110,  0b01100111,0b11111110,  0b01100111,0b11111110,  0b00001111,0b11111111,  0b10011111,0b11111111,  0b00000111,0b11111000,
  0b00000111,0b11110000,  0b11111111,0b11100111,  0b11111111,0b11100111,  0b11111111,0b11100111,  0b00000111,0b11110000,  0b00000111,0b11111000,  0b11111111,0b11111111,  0b11100111,0b11111111,
  0b11100111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11100111,0b11111111,  0b11100111,0b11111111,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,
  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b01100111,0b11111110,  0b01100111,0b11111100,
  0b01100111,0b11110000,  0b00001111,0b11100011,  0b10011111,0b11101111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111
};

PGMDATA(bmpSFC) = {
  0b11111111,0b11111111,  0b00001111,0b11100111,  0b00000111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100000,
  0b11100111,0b11110000,  0b11111111,0b11111111,  0b00000111,0b11110000,  0b00000111,0b11100000,  0b11111111,0b11100111,  0b11111111,0b11100111,  0b11111111,0b11100111,  0b11111111,0b11100111,
  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b01100111,0b11111110,  0b01100111,0b11111110,  0b01100111,0b11111110,
  0b01100111,0b11111110,  0b00000111,0b11111110,  0b00001111,0b11111111,  0b11111111,0b11111111,  0b00111111,0b11111100,  0b00001111,0b11110000,  0b01001111,0b11110010,  0b01100111,0b11100110,
  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b01100111,0b11111110,
  0b01100111,0b11111110,  0b01100111,0b11111000,  0b01100111,0b11110000,  0b00000111,0b11100010,  0b00001111,0b11100111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b00111111,0b11100000,  0b00001111,0b11100000,  0b01001111,0b11111110,  0b01100111,0b11111110,  0b01100111,0b11111110,  0b01100111,0b11111110,  0b01100111,0b11111110,
  0b01100111,0b11111110,  0b11111111,0b11111111,  0b11100111,0b11110000,  0b01100111,0b11100000,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01001111,0b11100110,
  0b00001111,0b11100000,  0b00111111,0b11100000,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11100111,0b11111111,  0b11100111,0b11111111,  0b00000111,0b11100000,
  0b00000111,0b11100000,  0b11100111,0b11111111,  0b11001111,0b11111111,  0b00001111,0b11100000,  0b00111111,0b11100000,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,
  0b11111111,0b11111111,  0b00111111,0b11111100,  0b00001111,0b11110000,  0b11001111,0b11110011,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100111,
  0b11100111,0b11100111,  0b11111111,0b11111111,  0b00111111,0b11111100,  0b00001111,0b11110000,  0b11001111,0b11110011,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100111,
  0b11100111,0b11100111,  0b11001111,0b11110011,  0b00001111,0b11110000,  0b00111111,0b11111100,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11100111,0b11111111,
  0b11100111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11100111,0b11111111,  0b11001111,0b11111111,  0b00001111,0b11100000,  0b00111111,0b11100000,  0b11111111,0b11111111
};

PGMDATA(bmpA2600){
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b10011111,  0b11111111,0b10011111,  0b11111111,0b10001111,  0b11111111,0b11000111,  0b11111111,0b11100011,
  0b11111111,0b11110000,  0b00000001,0b11111100,  0b11111111,0b11111111,  0b00000001,0b10000000,  0b11111111,0b11111111,  0b00000001,0b11111100,  0b11111111,0b11110000,  0b11111111,0b11100011,
  0b11111111,0b11000111,  0b11111111,0b10001111,  0b11111111,0b10011111,  0b11111111,0b10011111,  0b11111111,0b11111111,  0b11111111,0b10011001,  0b01111111,0b10011000,  0b00001111,0b10011110,
  0b11000011,0b10011110,  0b11110001,0b10011110,  0b11000011,0b10011110,  0b00001111,0b10011110,  0b01111111,0b10011000,  0b11111001,0b10011001,  0b11111001,0b10011111,  0b11111001,0b10011111,
  0b00000001,0b10011000,  0b00000001,0b10011000,  0b11111001,0b10011111,  0b11111001,0b10011111,  0b11111001,0b10011001,  0b01111111,0b10011000,  0b00001111,0b10011110,  0b11000011,0b10011110,
  0b11110001,0b10011110,  0b11000011,0b10011110,  0b00001111,0b10011110,  0b01111111,0b10011000,  0b11111111,0b10011001,  0b11111111,0b10011111,  0b00000011,0b10011000,  0b00000001,0b10011000,
  0b11111001,0b10011111,  0b00111001,0b10011110,  0b00110001,0b10011110,  0b10000011,0b10011101,  0b11000111,0b10011001,  0b11111111,0b10011011,  0b11111111,0b10011111,  0b00000001,0b10011000,
  0b00000001,0b10011000,  0b11111111,0b10011111,  0b11111111,0b10011111,  0b11111111,0b10011111,  0b11111111,0b10011111,  0b11111111,0b10011111,  0b11111111,0b10011111,  0b11100111,0b10011001,
  0b11100011,0b10011000,  0b01111001,0b10011000,  0b00111001,0b10011000,  0b00011001,0b10011001,  0b10000011,0b10011001,  0b11000111,0b10011001,  0b11111111,0b10011111,  0b00111111,0b10011110,
  0b00011111,0b10011100,  0b11001111,0b10011001,  0b11000111,0b10011001,  0b11000011,0b10011001,  0b00010001,0b10011100,  0b00111001,0b10011110,  0b11111111,0b10011111,  0b00001111,0b10011111,
  0b00000111,0b10011110,  0b11110011,0b10011100,  0b11111001,0b10011001,  0b11111001,0b10011001,  0b11111001,0b10011001,  0b11111001,0b10011001,  0b11111001,0b10011001,  0b11110011,0b10011100,
  0b00000111,0b10011110,  0b00001111,0b10011111,  0b11111111,0b10011111,  0b00001111,0b10011111,  0b00000111,0b10011110,  0b11110011,0b10011100,  0b11111001,0b10011001,  0b11111001,0b10011001,
  0b11111001,0b10011001,  0b11111001,0b10011001,  0b11111001,0b10011001,  0b11110011,0b10011100,  0b00000111,0b10011110,  0b00001111,0b10011111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111
};

PGMDATA(bmpMD_3){
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11101111,  0b11111111,0b11100011,  0b11111111,0b11110000,  0b00111111,0b11111100,  0b00001111,0b11101111,  0b11000111,0b11100011,
  0b11100111,0b11110000,  0b00100111,0b11111100,  0b00001111,0b11111111,  0b11000111,0b11111111,  0b11100111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11111111,0b11111111,
  0b00011111,0b11100000,  0b00001111,0b11100000,  0b01000111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b11111111,0b11111111,
  0b00011111,0b11100000,  0b00001111,0b11100000,  0b11000111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100000,  0b01111111,0b11100000,
  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11000111,0b11111101,  0b00001111,0b11111001,  0b00111111,0b11111000,  0b11111111,0b11110000,  0b11111111,0b11100011,
  0b11111111,0b11101111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,
  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11000111,0b11100011,  0b10001111,0b11110001,  0b00011111,0b11111000,  0b01111111,0b11111110,  0b11111111,0b11111111,  0b00000111,0b11100000,
  0b00000111,0b11100000,  0b11100111,0b11111111,  0b11100111,0b11111110,  0b01000111,0b11111000,  0b00001111,0b11100000,  0b00011111,0b11100111,  0b11111111,0b11111111,  0b00000111,0b11100000,
  0b00000111,0b11100000,  0b11111111,0b11111111,  0b00000111,0b11111111,  0b00000111,0b11111100,  0b11111111,0b11110000,  0b11111111,0b11100011,  0b11111111,0b11100011,  0b11111111,0b11110000,
  0b00000111,0b11111100,  0b00000111,0b11111111,  0b11111111,0b11111111,  0b00011111,0b11100000,  0b00001111,0b11100000,  0b01000111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,
  0b01100111,0b11100110,  0b01100111,0b11100110,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00011111,0b11111000,  0b11101111,0b11110111,  0b11010111,0b11101011,
  0b01010111,0b11101011,  0b01010111,0b11101011,  0b10110111,0b11101100,  0b11101111,0b11110111,  0b00011111,0b11111000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111
};

PGMDATA(bmpMD_6){
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11101111,  0b11111111,0b11100011,  0b11111111,0b11110000,  0b00111111,0b11111100,  0b00001111,0b11101111,  0b11000111,0b11100011,
  0b11100111,0b11110000,  0b00100111,0b11111100,  0b00001111,0b11111111,  0b11000111,0b11111111,  0b11100111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11111111,0b11111111,
  0b00011111,0b11100000,  0b00001111,0b11100000,  0b01000111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b11111111,0b11111111,
  0b00011111,0b11100000,  0b00001111,0b11100000,  0b11000111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100000,  0b01111111,0b11100000,
  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11000111,0b11111101,  0b00001111,0b11111001,  0b00111111,0b11111000,  0b11111111,0b11110000,  0b11111111,0b11100011,
  0b11111111,0b11101111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,
  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11000111,0b11100011,  0b10001111,0b11110001,  0b00011111,0b11111000,  0b01111111,0b11111110,  0b11111111,0b11111111,  0b00000111,0b11100000,
  0b00000111,0b11100000,  0b11100111,0b11111111,  0b11100111,0b11111110,  0b01000111,0b11111000,  0b00001111,0b11100000,  0b00011111,0b11100111,  0b11111111,0b11111111,  0b00000111,0b11100000,
  0b00000111,0b11100000,  0b11111111,0b11111111,  0b00000111,0b11111111,  0b00000111,0b11111100,  0b11111111,0b11110000,  0b11111111,0b11100011,  0b11111111,0b11100011,  0b11111111,0b11110000,
  0b00000111,0b11111100,  0b00000111,0b11111111,  0b11111111,0b11111111,  0b00011111,0b11100000,  0b00001111,0b11100000,  0b01000111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,
  0b01100111,0b11100110,  0b01100111,0b11100110,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00011111,0b11111000,  0b11101111,0b11110111,  0b00110111,0b11101100,  0b01010111,0b11101011,  0b01010111,0b11101011,  0b11110111,0b11101100,
  0b11101111,0b11110111,  0b00011111,0b11111000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111
};
PGMDATA(bmpN64){
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b00000111,0b11111110,  0b00011111,0b11110000,  0b11111111,0b11000000,
  0b00000111,0b11000000,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b00000111,0b11000000,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b00000111,0b11111111,  0b00011111,0b11110000,  0b11111111,0b11000000,
  0b00000111,0b11000000,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b11111111,0b11111111,  0b11000111,0b11111111,  0b11000111,0b11111111,  0b00000111,0b11000000,  0b00000111,0b11000000,
  0b00000111,0b11000000,  0b11000111,0b11111111,  0b11000111,0b11111111,  0b11111111,0b11111111,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b01000111,0b11000100,
  0b01000111,0b11000100,  0b01000111,0b11000100,  0b11000111,0b11000111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b00000111,0b11000000,
  0b00000111,0b11111110,  0b00011111,0b11110000,  0b11111111,0b11000000,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b00000111,0b11000000,  0b00000111,0b11000000,  0b00000111,0b11000000,  0b11000111,0b11000111,  0b11000111,0b11000111,  0b00000111,0b11000000,  0b00001111,0b11100000,  0b00011111,0b11110000,
  0b11111111,0b11111111,  0b00011111,0b11110000,  0b00001111,0b11100000,  0b00000111,0b11000000,  0b11000111,0b11000111,  0b11000111,0b11000111,  0b00000111,0b11000000,  0b00001111,0b11100000,
  0b00011111,0b11110000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00000111,0b11111111,  0b00000011,0b11111110,  0b11101001,0b11111110,  0b11101101,0b11111110,  0b00001101,0b11111110,
  0b00011101,0b11111111,  0b11111111,0b11111111,  0b10111111,0b11111111,  0b10001111,0b11111111,  0b10110111,0b11111111,  0b00000011,0b11111110,  0b00000001,0b11111110,  0b10111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111
};

PGMDATA(bmpNGC){
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00001111,0b11110000,  0b00000111,0b11100000,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b01100111,0b11100110,
  0b01100111,0b11100110,  0b01100111,0b11100010,  0b01100111,0b11110000,  0b01100111,0b11111000,  0b11111111,0b11101111,  0b11111111,0b11100011,  0b11111111,0b11100001,  0b01111111,0b11100000,
  0b00111111,0b11100100,  0b00001111,0b11100111,  0b10000111,0b11100111,  0b10000111,0b11111111,  0b00001111,0b11111111,  0b00111111,0b11111100,  0b01111111,0b11111000,  0b11111111,0b11110001,
  0b11111111,0b11100011,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b00001111,0b11111111,  0b00111111,0b11111100,  0b11111111,0b11110000,  0b11111111,0b11100001,  0b11111111,0b11100001,
  0b11111111,0b11110000,  0b00111111,0b11111100,  0b00001111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,
  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00001111,0b11110000,  0b00000111,0b11100000,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100111,
  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b10000111,0b11100001,  0b10001111,0b11110001,  0b11111111,0b11111111,  0b00000111,0b11110000,  0b00000111,0b11100000,
  0b11111111,0b11100111,  0b11111111,0b11100111,  0b11111111,0b11100111,  0b11111111,0b11100111,  0b11111111,0b11100111,  0b11111111,0b11100111,  0b00000111,0b11100000,  0b00000111,0b11110000,
  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,
  0b01100111,0b11100110,  0b00000111,0b11100000,  0b10001111,0b11110001,  0b11111111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b01100111,0b11100110,  0b01100111,0b11100110,
  0b01100111,0b11100110,  0b01100111,0b11100110,  0b01100111,0b11100110,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11100111,0b11100111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111
};

PGMDATA(bmpPS){
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00000011,0b11110000,  0b00000011,0b11110000,  0b11111011,0b11111111,  0b01111011,0b11111111,  0b01111011,0b11111111,  0b01111011,0b11111111,
  0b10000111,0b11111111,  0b10000111,0b11111111,  0b11111111,0b11111111,  0b00000011,0b11110000,  0b00000011,0b11110000,  0b11111111,0b11111111,  0b11111111,0b11111000,  0b11111111,0b11111000,
  0b01101111,0b11110111,  0b01101111,0b11110111,  0b01101111,0b11110111,  0b11101111,0b11110111,  0b00011111,0b11110000,  0b00011111,0b11110000,  0b11111111,0b11111111,  0b11101111,0b11111111,
  0b10001111,0b11111111,  0b00011111,0b11111110,  0b01111111,0b00111000,  0b11111111,0b00000001,  0b11111111,0b11000111,  0b11111111,0b11110001,  0b01111111,0b11111000,  0b00011111,0b11111110,
  0b10001111,0b11111111,  0b11101111,0b11111111,  0b11111111,0b11111111,  0b11000111,0b11111111,  0b11000111,0b11110111,  0b10111011,0b11110111,  0b10111011,0b11110111,  0b01111011,0b11110111,
  0b01111011,0b11110111,  0b11111011,0b11111000,  0b11111111,0b11111000,  0b11111111,0b11111111,  0b00000111,0b11110000,  0b00000111,0b11110000,  0b11101111,0b11110111,  0b11111111,0b11111111,
  0b11111111,0b11111000,  0b11111111,0b11111000,  0b01101111,0b11110111,  0b01101111,0b11110111,  0b01101111,0b11110111,  0b11101111,0b11110111,  0b00011111,0b11110000,  0b00011111,0b11110000,
  0b11111111,0b11111111,  0b00000111,0b11110000,  0b00000111,0b11110000,  0b11101111,0b11110111,  0b11111111,0b11111111,  0b00001011,0b11110000,  0b00001011,0b11110000,  0b11111111,0b11111111,
  0b00011111,0b11111000,  0b00011111,0b11111000,  0b11101111,0b11110111,  0b11101111,0b11110111,  0b11101111,0b11110111,  0b11101111,0b11110111,  0b00011111,0b11111000,  0b00011111,0b11111000,
  0b11111111,0b11111111,  0b00001111,0b11110000,  0b00001111,0b11110000,  0b11101111,0b11111111,  0b11101111,0b11111111,  0b11101111,0b11111111,  0b00011111,0b11110000,  0b00011111,0b11110000,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111
};

PGMDATA(bmpPS_A){
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00000011,0b11110000,  0b00000011,0b11110000,  0b11111011,0b11111111,  0b01111011,0b11111111,  0b01111011,0b11111111,  0b01111011,0b11111111,
  0b10000111,0b11111111,  0b10000111,0b11111111,  0b11111111,0b11111111,  0b00000011,0b11110000,  0b00000011,0b11110000,  0b11111111,0b11111111,  0b11111111,0b11111000,  0b11111111,0b11111000,
  0b01101111,0b11110111,  0b01101111,0b11110111,  0b01101111,0b11110111,  0b11101111,0b11110111,  0b00011111,0b11110000,  0b00011111,0b11110000,  0b11111111,0b11111111,  0b11101111,0b11111111,
  0b10001111,0b11111111,  0b00011111,0b11111110,  0b01111111,0b00111000,  0b11111111,0b00000001,  0b11111111,0b11000111,  0b11111111,0b11110001,  0b01111111,0b11111000,  0b00011111,0b11111110,
  0b10001111,0b11111111,  0b11101111,0b11111111,  0b11111111,0b11111111,  0b11000111,0b11111111,  0b11000111,0b11110111,  0b10111011,0b11110111,  0b10111011,0b11110111,  0b01111011,0b11110111,
  0b01111011,0b11110111,  0b11111011,0b11111000,  0b11111111,0b11111000,  0b11111111,0b11111111,  0b00000111,0b11110000,  0b00000111,0b11110000,  0b11101111,0b11110111,  0b11111111,0b11111111,
  0b11111111,0b11111000,  0b11111111,0b11111000,  0b01101111,0b11110111,  0b01101111,0b11110111,  0b01101111,0b11110111,  0b11101111,0b11110111,  0b00011111,0b11110000,  0b00011111,0b11110000,
  0b11111111,0b11111111,  0b00000111,0b11110000,  0b00000111,0b11110000,  0b11101111,0b11110111,  0b11111111,0b11111111,  0b00001011,0b11110000,  0b00001011,0b11110000,  0b11111111,0b11111111,
  0b00011111,0b11111000,  0b00011111,0b11111000,  0b11101111,0b11110111,  0b11101111,0b11110111,  0b11101111,0b11110111,  0b11101111,0b11110111,  0b00011111,0b11111000,  0b00011111,0b11111000,
  0b11111111,0b11111111,  0b00001111,0b11110000,  0b00001111,0b11110000,  0b11101111,0b11111111,  0b11101111,0b11111111,  0b11101111,0b11111111,  0b00011111,0b11110000,  0b00011111,0b11110000,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111011,0b11110111,  0b00011011,0b11110100,  0b01101011,0b11110111,  0b01101011,0b11110111,  0b00011011,0b11110100,  0b11111011,0b11110111,
  0b00001011,0b11110100,  0b10011011,0b11110111,  0b01111011,0b11110110,  0b00001011,0b11110100,  0b11111011,0b11110111,  0b00011011,0b11110100,  0b01101011,0b11110111,  0b01101011,0b11110111,
  0b00011011,0b11110100,  0b11111011,0b11110111,  0b00001011,0b11110100,  0b11111011,0b11110101,  0b11111011,0b11110101,  0b00011011,0b11110110,  0b11101011,0b11110101,  0b11101011,0b11110101,
  0b00011011,0b11110110,  0b11111011,0b11110111,  0b00011011,0b11110110,  0b11101011,0b11110101,  0b10101011,0b11110101,  0b00101011,0b11110100,  0b11111011,0b11110111,  0b11111111,0b11111111  
};

PGMDATA(bmpSS){
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11110111,  0b10001111,0b11101111,  0b00000111,0b11101111,  0b00110111,0b11101111,  0b01110111,0b11101110,  0b01110111,0b11101110,
  0b11110111,0b11101100,  0b11110111,0b11100000,  0b11110111,0b11110001,  0b11100111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11110111,0b11101110,  0b11110111,0b11101110,
  0b01110111,0b11101110,  0b01110111,0b11101100,  0b11100111,0b11100111,  0b00011111,0b11110000,  0b00001111,0b11110000,  0b11001111,0b11110011,  0b11110111,0b11101111,  0b11110111,0b11101111,
  0b11110111,0b11101110,  0b11110111,0b11101110,  0b11110111,0b11100000,  0b11101111,0b11100000,  0b11111111,0b11100001,  0b01111111,0b11100000,  0b00011111,0b11101110,  0b10000111,0b11111111,
  0b11100111,0b11111111,  0b10011111,0b11111111,  0b01111111,0b11111110,  0b11110011,0b11101001,  0b11000001,0b11100111,  0b00001100,0b11101111,  0b00011111,0b01111100,  0b01111111,0b10011000,
  0b11111111,0b11000001,  0b11111111,0b11100111,  0b11111111,0b11100111,  0b11111111,0b11100001,  0b01111111,0b11100000,  0b00011111,0b11101110,  0b10000111,0b11111111,  0b11100111,0b11111111,
  0b10011111,0b11111111,  0b01110111,0b11111110,  0b11110111,0b11101001,  0b11110111,0b11100111,  0b11110111,0b11101111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11110111,0b11101111,
  0b11110111,0b11111111,  0b11110111,0b11111111,  0b11110111,0b11111111,  0b00000111,0b11111000,  0b00000111,0b11110000,  0b11111111,0b11100111,  0b11111111,0b11101111,  0b11111111,0b11101111,
  0b11111111,0b11110111,  0b00000111,0b11111000,  0b11110111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11110111,0b11111111,  0b11110111,0b11111110,  0b01110111,0b11111100,
  0b01100111,0b11110001,  0b00001111,0b11100111,  0b10011111,0b11101111,  0b11110111,0b11101111,  0b00000111,0b11100000,  0b11000111,0b11111111,  0b10001111,0b11111111,  0b00111111,0b11111110,
  0b01111111,0b11111100,  0b11111111,0b11110001,  0b11111111,0b11100011,  0b00000111,0b11100000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111
};

PGMDATA(bmpSS_G){
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11110111,  0b10001111,0b11101111,  0b00000111,0b11101111,  0b00110111,0b11101111,  0b01110111,0b11101110,  0b01110111,0b11101110,
  0b11110111,0b11101100,  0b11110111,0b11100000,  0b11110111,0b11110001,  0b11100111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11110111,0b11101110,  0b11110111,0b11101110,
  0b01110111,0b11101110,  0b01110111,0b11101100,  0b11100111,0b11100111,  0b00011111,0b11110000,  0b00001111,0b11110000,  0b11001111,0b11110011,  0b11110111,0b11101111,  0b11110111,0b11101111,
  0b11110111,0b11101110,  0b11110111,0b11101110,  0b11110111,0b11100000,  0b11101111,0b11100000,  0b11111111,0b11100001,  0b01111111,0b11100000,  0b00011111,0b11101110,  0b10000111,0b11111111,
  0b11100111,0b11111111,  0b10011111,0b11111111,  0b01111111,0b11111110,  0b11110011,0b11101001,  0b11000001,0b11100111,  0b00001100,0b11101111,  0b00011111,0b01111100,  0b01111111,0b10011000,
  0b11111111,0b11000001,  0b11111111,0b11100111,  0b11111111,0b11100111,  0b11111111,0b11100001,  0b01111111,0b11100000,  0b00011111,0b11101110,  0b10000111,0b11111111,  0b11100111,0b11111111,
  0b10011111,0b11111111,  0b01110111,0b11111110,  0b11110111,0b11101001,  0b11110111,0b11100111,  0b11110111,0b11101111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11110111,0b11101111,
  0b11110111,0b11111111,  0b11110111,0b11111111,  0b11110111,0b11111111,  0b00000111,0b11111000,  0b00000111,0b11110000,  0b11111111,0b11100111,  0b11111111,0b11101111,  0b11111111,0b11101111,
  0b11111111,0b11110111,  0b00000111,0b11111000,  0b11110111,0b11111111,  0b00000111,0b11100000,  0b00000111,0b11100000,  0b11110111,0b11111111,  0b11110111,0b11111110,  0b01110111,0b11111100,
  0b01100111,0b11110001,  0b00001111,0b11100111,  0b10011111,0b11101111,  0b11110111,0b11101111,  0b00000111,0b11100000,  0b11000111,0b11111111,  0b10001111,0b11111111,  0b00111111,0b11111110,
  0b01111111,0b11111100,  0b11111111,0b11110001,  0b11111111,0b11100011,  0b00000111,0b11100000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b10011111,0b11111111,  0b00001111,0b11111110,  0b00001111,0b11111110,  0b10001111,0b11111110,  0b00001111,0b11111110,  0b00001111,0b11111110,
  0b00001111,0b11111110,  0b00001111,0b11111000,  0b00001111,0b11111011,  0b00001111,0b11111000,  0b00001111,0b11111011,  0b00001111,0b11111100,  0b00011111,0b11000000,  0b00001111,0b11000000,
  0b10001111,0b11000000,  0b11111111,0b11100001,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111 
};

PGMDATA(bmpDC){
  0b11111111,0b11111111,  0b00011111,0b11111000,  0b11101111,0b11110111,  0b00110111,0b11101100,  0b11011011,0b11101101,  0b01101011,0b11101011,  0b10101011,0b11101010,  0b10101011,0b11101011,
  0b01101011,0b11101100,  0b11011011,0b11110111,  0b00110111,0b11111000,  0b11101111,0b11111111,  0b10011111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00000001,0b10000000,
  0b00000001,0b10000000,  0b11111001,0b10011111,  0b11111001,0b10011111,  0b11111001,0b10011111,  0b11111001,0b10011111,  0b11111001,0b10011111,  0b11111001,0b10011111,  0b11111011,0b11011111,
  0b11110011,0b11001111,  0b00000111,0b11100000,  0b00001111,0b11110000,  0b00111111,0b11111100,  0b11111111,0b11111111,  0b00011111,0b10000000,  0b00011111,0b10000000,  0b10111111,0b11111111,
  0b10111111,0b11111111,  0b11011111,0b11111111,  0b11011111,0b11111111,  0b11111111,0b11111001,  0b01111111,0b11100000,  0b00111111,0b11000000,  0b11011111,0b10011100,  0b11011111,0b10111100,
  0b11011111,0b10111100,  0b11011111,0b10111100,  0b00111111,0b10011100,  0b01111111,0b11011100,  0b11111111,0b11111111,  0b11111111,0b11000111,  0b11111111,0b10000011,  0b11011111,0b10011001,
  0b11011111,0b10111101,  0b11011111,0b10011101,  0b11011111,0b11011101,  0b00111111,0b10000000,  0b00111111,0b10000000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00011111,0b10000000,
  0b00111111,0b10000000,  0b10111111,0b11111111,  0b11011111,0b11111111,  0b11011111,0b11111111,  0b11011111,0b11111111,  0b00011111,0b10000000,  0b00111111,0b10000000,  0b10111111,0b11111111,
  0b11011111,0b11111111,  0b11011111,0b11111111,  0b11011111,0b11111111,  0b00011111,0b10000000,  0b00111111,0b10000000,  0b11111111,0b11111111,  0b01111111,0b11100000,  0b00111111,0b11000000,
  0b10111111,0b11011111,  0b10011111,0b10011111,  0b11011111,0b10111111,  0b11011111,0b10111111,  0b11011111,0b10111111,  0b10111111,0b11011111,  0b11111111,0b11111111,  0b11111111,0b11100111,
  0b11111111,0b11000011,  0b11011111,0b10011011,  0b11011111,0b10111101,  0b11011111,0b10111101,  0b11011111,0b10011101,  0b00111111,0b10000000,  0b00111111,0b10000000,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b00111111,0b10011100,  0b10011111,0b10111100,  0b11011111,0b10111101,  0b11011111,0b10111101,  0b10111111,0b11000011,  0b11111111,0b11100111,  0b11111111,0b11111111,
  0b11011111,0b11111111,  0b00000111,0b11000000,  0b11011111,0b10011111,  0b11011111,0b10111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111
};

PGMDATA(bmpWII_N){
  0b11111111,0b11111111,  0b00001111,0b11110000,  0b00000011,0b11000000,  0b11100011,0b11000011,  0b11111001,0b10011111,  0b11111001,0b10011111,  0b11111001,0b10011111,  0b00011001,0b10011000,
  0b00011001,0b10011000,  0b10111001,0b10011111,  0b01111001,0b10011110,  0b11111001,0b10011101,  0b00011001,0b10011000,  0b00011001,0b10011000,  0b11111001,0b10011111,  0b01011001,0b10011000,
  0b01011001,0b10011000,  0b11111001,0b10011111,  0b01111001,0b10011000,  0b01111001,0b10011000,  0b01111001,0b10011111,  0b10111001,0b10011111,  0b00111001,0b10011000,  0b01111001,0b10011000,
  0b10111001,0b10011111,  0b00011001,0b10011000,  0b00011001,0b10011000,  0b10111001,0b10011111,  0b01111001,0b10011100,  0b00111001,0b10011000,  0b10111001,0b10011010,  0b10111001,0b10011010,
  0b00111001,0b10011010,  0b01111001,0b10011110,  0b11111001,0b10011111,  0b01111001,0b10011000,  0b01111001,0b10011000,  0b01111001,0b10011111,  0b10111001,0b10011111,  0b00111001,0b10011000,
  0b01111001,0b10011000,  0b11111001,0b10011111,  0b01111001,0b10011100,  0b00111001,0b10011000,  0b10111001,0b10011011,  0b01111001,0b10011011,  0b00011001,0b10011000,  0b00011001,0b10011000,
  0b11111001,0b10011111,  0b01111001,0b10011100,  0b00111001,0b10011000,  0b10111001,0b10011011,  0b10111001,0b10011011,  0b00111001,0b10011000,  0b01111001,0b10011100,  0b11111001,0b10011111,
  0b11111001,0b10011111,  0b11100011,0b11000111,  0b00000011,0b11000000,  0b00001111,0b11110000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11100011,0b11111111,  0b00000011,0b11111110,
  0b00000111,0b11100000,  0b01111111,0b10000000,  0b11111111,0b10000111,  0b01111111,0b10000000,  0b00000111,0b11100000,  0b00000011,0b11111110,  0b11100011,0b11111111,  0b00000011,0b11111110,
  0b00000111,0b11100000,  0b01111111,0b10000000,  0b11111111,0b10000111,  0b01111111,0b10000000,  0b00000111,0b11100000,  0b00000011,0b11111110,  0b11100011,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b00110001,0b10000000,  0b00110001,0b10000000,  0b00110001,0b10000000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00110001,0b10000000,
  0b00110001,0b10000000,  0b00110001,0b10000000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,
  0b00011111,0b11111000,  0b11101111,0b11100111,  0b01110111,0b11011111,  0b00110111,0b10111110,  0b01110111,0b10011111,  0b11101111,0b10100111,  0b00011111,0b10111000,  0b11111111,0b11011111,
  0b11111111,0b11101111,  0b11111111,0b11110111,  0b11111111,0b11111011,  0b11111111,0b11110001,  0b11111111,0b11110001,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111
};

PGMDATA(bmpWII_C){
  0b11111111,0b11111111,  0b00001111,0b11110000,  0b00000011,0b11000000,  0b11100011,0b11000011,  0b11111001,0b10011111,  0b11111001,0b10011111,  0b11111001,0b10011111,  0b00011001,0b10011000,
  0b00011001,0b10011000,  0b10111001,0b10011111,  0b01111001,0b10011110,  0b11111001,0b10011101,  0b00011001,0b10011000,  0b00011001,0b10011000,  0b11111001,0b10011111,  0b01011001,0b10011000,
  0b01011001,0b10011000,  0b11111001,0b10011111,  0b01111001,0b10011000,  0b01111001,0b10011000,  0b01111001,0b10011111,  0b10111001,0b10011111,  0b00111001,0b10011000,  0b01111001,0b10011000,
  0b10111001,0b10011111,  0b00011001,0b10011000,  0b00011001,0b10011000,  0b10111001,0b10011111,  0b01111001,0b10011100,  0b00111001,0b10011000,  0b10111001,0b10011010,  0b10111001,0b10011010,
  0b00111001,0b10011010,  0b01111001,0b10011110,  0b11111001,0b10011111,  0b01111001,0b10011000,  0b01111001,0b10011000,  0b01111001,0b10011111,  0b10111001,0b10011111,  0b00111001,0b10011000,
  0b01111001,0b10011000,  0b11111001,0b10011111,  0b01111001,0b10011100,  0b00111001,0b10011000,  0b10111001,0b10011011,  0b01111001,0b10011011,  0b00011001,0b10011000,  0b00011001,0b10011000,
  0b11111001,0b10011111,  0b01111001,0b10011100,  0b00111001,0b10011000,  0b10111001,0b10011011,  0b10111001,0b10011011,  0b00111001,0b10011000,  0b01111001,0b10011100,  0b11111001,0b10011111,
  0b11111001,0b10011111,  0b11100011,0b11000111,  0b00000011,0b11000000,  0b00001111,0b11110000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11100011,0b11111111,  0b00000011,0b11111110,
  0b00000111,0b11100000,  0b01111111,0b10000000,  0b11111111,0b10000111,  0b01111111,0b10000000,  0b00000111,0b11100000,  0b00000011,0b11111110,  0b11100011,0b11111111,  0b00000011,0b11111110,
  0b00000111,0b11100000,  0b01111111,0b10000000,  0b11111111,0b10000111,  0b01111111,0b10000000,  0b00000111,0b11100000,  0b00000011,0b11111110,  0b11100011,0b11111111,  0b11111111,0b11111111,
  0b11111111,0b11111111,  0b00110001,0b10000000,  0b00110001,0b10000000,  0b00110001,0b10000000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00110001,0b10000000,
  0b00110001,0b10000000,  0b00110001,0b10000000,  0b11111111,0b11111111,  0b11111111,0b11111111,  0b00111111,0b11111000,  0b11011111,0b11110111,  0b01101111,0b11101111,  0b00101111,0b11101110,
  0b01110111,0b11011111,  0b11110111,0b11011111,  0b11110111,0b11010011,  0b01101111,0b11010011,  0b11101111,0b11011111,  0b01101111,0b10011111,  0b11101111,0b11011111,  0b01101111,0b11010011,
  0b11110111,0b11010011,  0b11110111,0b11011110,  0b10110111,0b11011111,  0b11101111,0b11101101,  0b01101111,0b11101111,  0b11011111,0b11110111,  0b00111111,0b11111000,  0b11111111,0b11111111
};

/**
 * If ENABLE_NONFONT_SPACE is nonzero, a space of width FONT_WIDTH will
 * be enabled in fonts which do not have an encoding for 0X20, space.
 */
#define ENABLE_NONFONT_SPACE 1

#define TICKER_QUEUE_DIM 6
#define OPTIMIZE_I2C 1

// Values for writeDisplay() mode parameter.
#define SSD1306_MODE_CMD 0
#define SSD1306_MODE_RAM 1
#define SSD1306_MODE_RAM_BUF 2
#define SSD1306_128x64_ADDRESS 0x3C

/**
 * @struct DevType
 * @brief Device initialization structure.
 */
struct DevType {
  const uint8_t* initcmds;
  const uint8_t initSize;
  const uint8_t lcdWidth;
  const uint8_t lcdHeight;
  const uint8_t colOffset;
};

//------------------------------------------------------------------------------
// This section is based on https://github.com/adafruit/Adafruit_SSD1306
/** Initialization commands for a 128x64 SSD1306 oled display. */
static const uint8_t MEM_TYPE Adafruit128x64init[] = {
    // Init sequence for Adafruit 128x64 OLED module
    SSD1306_DISPLAYOFF,
    SSD1306_SETDISPLAYCLOCKDIV, 0x80,  // the suggested ratio 0x80
    SSD1306_SETMULTIPLEX, 0x3F,        // ratio 64
    SSD1306_SETDISPLAYOFFSET, 0x0,     // no offset
    SSD1306_SETSTARTLINE,              // line #0
    SSD1306_CHARGEPUMP, 0x14,          // internal vcc
    SSD1306_MEMORYMODE, 0x02,          // page mode
    SSD1306_SEGREMAP | 0x1,            // column 127 mapped to SEG0
    SSD1306_COMSCANDEC,                // column scan direction reversed
    SSD1306_SETCOMPINS, 0x12,          // alt COM pins, disable remap
    SSD1306_SETCONTRAST, 0x7F,         // contrast level 127
    SSD1306_SETPRECHARGE, 0xF1,        // pre-charge period (1, 15)
    SSD1306_SETVCOMDETECT, 0x40,       // vcomh regulator level
    SSD1306_DISPLAYALLON_RESUME,
    SSD1306_NORMALDISPLAY,
    SSD1306_DISPLAYON
};
/** Initialize a 128x64 oled display. */
static const DevType MEM_TYPE Adafruit128x64 = {
  Adafruit128x64init,
  sizeof(Adafruit128x64init),
  128,
  64,
  0
};

//------------------------------------------------------------------------------
/**
 * @class UtilityScreen
 * @brief SSD1306 base class
 */
class UtilityScreen : public Print {
private:
  // TickerState
  struct TickerState {
    const char* queue[TICKER_QUEUE_DIM];  ///< Queue of text pointers.
    uint8_t nQueue = 0;                   ///< Count of pointers in queue.
    const uint8_t* font = nullptr;        ///< Font for ticker.
    bool mag2X;                           ///< Use mag2X if true.
    uint8_t row;                          ///< Row for ticker
    uint8_t bgnCol;                       ///< Begin column of ticker.
    uint8_t endCol;                       ///< End column of ticker.
    bool init;     ///< clear and initialize display area if true.
    uint8_t col;   ///< Column for start of displayed text.
    uint8_t skip;  ///< Number of pixels to skip in first character.
    /// @return Count of free queue slots.
    uint8_t queueFree() const { return TICKER_QUEUE_DIM - nQueue; }
    /// @return Count of used queue slots.
    uint8_t queueUsed() const { return nQueue; }
  };

protected:
  uint8_t m_nData;

  uint16_t fontSize() const;
  void writeDisplay(uint8_t b, uint8_t mode);
  void writeDisplay(uint8_t *b, uint8_t size, uint8_t mode);
  uint8_t m_col;            // Cursor column.
  uint8_t m_row;            // Cursor RAM row.
  uint8_t m_displayWidth;   // Display width.
  uint8_t m_displayHeight;  // Display height.
  uint8_t m_colOffset;      // Column offset RAM to SEG.
  uint8_t m_letterSpacing;  // Letter-spacing in pixels.
  uint8_t m_skip = 0;
  const uint8_t* m_font = nullptr;  // Current font.
  uint8_t m_invertMask = 0;         // font invert mask
  uint8_t m_magFactor = 1;          // Magnification factor.

  using Print::write;
  uint8_t charSpacing(uint8_t c) { return charWidth(c) + letterSpacing(); }
  // Determine the width of a character c, return Width of the character in pixels.
  uint8_t charWidth(uint8_t c) const;
  // Clear the display and set the cursor to (0, 0).
  void clear();
  // Clear a region of the display.c0 Starting column. The final cursor position will be (colStart, rowStart).
  void clear(uint8_t colStart, uint8_t colEnd, uint8_t rowStart, uint8_t rowEnd);
  // Clear a field of n fieldWidth() characters.
  void clearToEOL();
  // The current column in pixels.
  uint8_t col() const { return m_col; }
  // The display hight in pixels.
  uint8_t displayHeight() const { return m_displayHeight; }
  // Set display to normal or 180 degree remap mode.
  void displayRemap(bool mode);
  // The display height in rows with eight pixels to a row.
  uint8_t displayRows() const { return m_displayHeight / 8; }
  // The display width in pixels.
  uint8_t displayWidth() const { return m_displayWidth; }
  // Width of a field in pixels.
  size_t fieldWidth(uint8_t n);
  // The current font pointer.
  const uint8_t* font() const { return m_font; }
  // The count of characters in a font.
  uint8_t fontCharCount() const;
  // The first character in a font.
  char fontFirstChar() const;
  // The current font height in pixels.
  uint8_t fontHeight() const;
  // The number of eight pixel rows required to display a character in the current font.
  uint8_t fontRows() const;
  // The maximum width of characters in the current font.
  uint8_t fontWidth() const;
  // Set the cursor position to (0, 0).
  void home() { setCursor(0, 0); }
  // Initialize the display controller.
  void init(const DevType* dev);
  // Set pixel mode for for entire display.
  void invertDisplay(bool invert);
  // invert mode.
  bool invertMode() const { return !!m_invertMask; }
  // Set invert mode for write/print.
  void setInvertMode(bool mode) { m_invertMask = mode ? 0XFF : 0; }
  // letter-spacing in pixels with magnification factor.
  uint8_t letterSpacing() const { return m_magFactor * m_letterSpacing; }
  // The character magnification factor.
  uint8_t magFactor() const { return m_magFactor; }
  // the current row number with eight pixels to a row.
  uint8_t row() const { return m_row; }
  // Set the current column number.
  void setCol(uint8_t col);
  // Set the cursor position.
  void setCursor(uint8_t col, uint8_t row, int8_t off=0);
  // Set the current font.
  void setFont(const uint8_t* font);
  // Set letter-spacing.  setFont() will restore default letter-spacing.
  void setLetterSpacing(uint8_t pixels) { m_letterSpacing = pixels; }
  // Set the current row number.
  void setRow(uint8_t row,int8_t offset);
  // Write a command byte to the display controller.
  void ssd1306WriteCmd(uint8_t c) { writeDisplay(c, SSD1306_MODE_CMD); }
  // Write a byte to RAM in the display controller.
  void ssd1306WriteRam(uint8_t c);
  // Write a byte to RAM in the display controller.
  void ssd1306WriteRamBuf(uint8_t c);
  // Skip leading pixels writing characters to display display RAM.
  void skipColumns(uint8_t n) { m_skip = n; }
  // Character width.
  size_t strWidth(const char* str) const;
  // Initialize TickerState struct.
  void tickerInit(TickerState* state, const uint8_t* font, uint8_t row,
                  bool mag2X = false, uint8_t bgnCol = 0, uint8_t endCol = 255);
  // Add text pointer to display queue.
  bool tickerText(TickerState* state, const String& str) {
    return tickerText(state, str.c_str());
  }
  // Add text pointer to display queue.
  bool tickerText(TickerState* state, const char* text);
  // Advance ticker by one pixel.
  int8_t tickerTick(TickerState* state);
  // Display a character.
  size_t write(uint8_t ch);
  void bitmap(uint8_t x, uint8_t y,uint8_t w, uint8_t h, uint8_t *bmp);

  inline void transmission()      {  Wire.beginTransmission(SSD1306_128x64_ADDRESS);};
  inline void end()               {  Wire.endTransmission();                        };
  inline void command(uint8_t cmd){  Wire.write(cmd);                               };
  void data(uint8_t *dt, uint8_t sz) { // 32bytes max.
    while(sz--){
      Wire.write(*dt++);
    }
  };
  void data(uint8_t dt) {
    Wire.write(dt);
  };
  void repeat(uint8_t dt, uint8_t sz){
    while(sz--){
      Wire.write(dt);
    }
  };

public:
  void begin(){
    init(&Adafruit128x64);
    clear();
    bitmap(0,0,16,8,bmpTitle);
  };

/*
  void initPrintButton(uint8_t v){
    transmission();
    command(0x40);
    for(;v>0;v--){
      data(2,4);
      data(0);
    }
    data(0);
    end();
  };

  void initPrintButtons(uint8_t p){
    setCursor(18, (1-p)*4+2);
    initPrintButton(4);
    initPrintButton(6);
    initPrintButton(6);
    initPrintButton(1);
  };
*/

  void printTypes(uint8_t p, uint16_t jt){
    switch (jt>>8) {
      case ATARI_A2600:
        bitmap(16,(1-p)*4,122,2,bmpA2600);
//        initPrintButtons(p);
        break;
      case SEGA_SATURN:
        if((jt&0xFF)==SS_SUBTYPE_LIGHTGUN)
          bitmap(16,(1-p)*4,122,2,bmpSS_G);
        else if((jt&0xFF)==SS_SUBTYPE_PAD)
          bitmap(16,(1-p)*4,122,2,bmpSS);
//        initPrintButtons(p);
        break;
      case SEGA_DREAMCAST:
        bitmap(16,(1-p)*4,122,2,bmpDC);
//        initPrintButtons(p);
        break;
      case SEGA_MEGADRIVE:
        if((jt&0xFF)==MD_SUBTYPE_6BUTTONS)
          bitmap(16,(1-p)*4,122,2,bmpMD_6);
        else if((jt&0xFF)==MD_SUBTYPE_3BUTTONS)
          bitmap(16,(1-p)*4,122,2,bmpMD_3);
//        initPrintButtons(p);
        break;
      case NINTENDO_FC:
        bitmap(16,(1-p)*4,122,2,bmpFC);
//        initPrintButtons(p);
        break;
      case NINTENDO_SFC:
        bitmap(16,(1-p)*4,122,2,bmpSFC);
//        initPrintButtons(p);
        break;
      case NINTENDO_N64:
        bitmap(16,(1-p)*4,122,2,bmpN64);
//        initPrintButtons(p);
        break;
      case NINTENDO_NGC:
        bitmap(16,(1-p)*4,122,2,bmpNGC);
//        initPrintButtons(p);
        break;
      case NINTENDO_WII:
        if((jt&0xFF)==WII_SUBTYPE_NUNCHUCK)
          bitmap(16,(1-p)*4,122,2,bmpWII_N);
        else if((jt&0xFF)==WII_SUBTYPE_CLASSIC)
          bitmap(16,(1-p)*4,122,2,bmpWII_C);
//        initPrintButtons(p);
        break;
      case SONY_PLAYSTATION:
        if((jt&0xFF)==PS_SUBTYPE_RED)
          bitmap(16,(1-p)*4,122,2,bmpPS_A);
        else if((jt&0xFF)==PS_SUBTYPE_DIGITAL)
          bitmap(16,(1-p)*4,122,2,bmpPS);
//        initPrintButtons(p);
        break;
      case NO_JOYPAD:
        clear(16,128,(1-p)*4,(1-p)*4+3);
        break;
    }
  };

  void printKeys(uint8_t p, Controllers *c){
    uint16_t a,b;
    uint8_t i;

    if( c->type() == NO_JOYPAD){
      return;
    }
    setCursor(18, (1-p)*4+2);
    transmission();
    command(0x40);
    for(i=0;i<4;i++){
      data(io3x5[(c->rawkeys()->buttons_value[i])],4);
      data(0);
    }
    data(0);
    end();
    transmission();
    command(0x40);
    for(i=8;i<14;i++){
      data(io3x5[(c->rawkeys()->buttons_value[i])],4);
      data(0);
    }
    data(0);
    end();
    transmission();
    command(0x40);
    for(i=14;i<20;i++){
      data(io3x5[(c->rawkeys()->buttons_value[i])],4);
      data(0);
    }
    data(0);
    end();
    transmission();
    command(0x40);
    for(i=20;i<21;i++){
      data(io3x5[(c->rawkeys()->buttons_value[i])],4);
      data(0);
    }
    end();

//    setCursor(20, (1-p)*4+3);
    for(i=0;i<4;i+=2){
      a=c->rawkeys()->axis_value[i];
      b=c->rawkeys()->axis_value[i+1];
      setCursor(20+i*18, (1-p)*4+3);
      transmission();
      command(0x40);
      repeat(0x1<<(b/9362),16);
      end();
      setCursor(20+i*18+(a>>12), (1-p)*4+3);
      transmission();
      command(0x40);
      repeat(0x7F,1);
      end();
    }
    for(i=4;i<6;i++){
      a=c->rawkeys()->axis_value[i];
      setCursor(20+i*18, (1-p)*4+3);
      transmission();
      command(0x40);
      repeat(0x41,16);
      end();
      setCursor(20+i*18+(a>>12), (1-p)*4+3);
      transmission();
      command(0x40);
      repeat(0x7F,1);
      end();
    }
/*
      if(a<10000)
        repeat(0,3);
      else
        data(number2x5[a/10000],2),data(0);
      if(a<1000)
        repeat(0,3);
      else
        data(number2x5[a/1000%10],2),data(0);
      if(a<100)
        repeat(0,3);
      else
        data(number2x5[a/100%10],2),data(0);
      if(a<10)
        repeat(0,3);
      else
        data(number2x5[a/10%10],2),data(0);
      data(number2x5[a%10],2),data(0);
      repeat(0,3);
      end();
    }
*/
  };
};

#endif
